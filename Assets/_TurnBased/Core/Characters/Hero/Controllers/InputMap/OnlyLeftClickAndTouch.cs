//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_TurnBased/Core/Characters/Hero/Controllers/InputMap/OnlyLeftClickAndTouch.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OnlyLeftClickAndTouch: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OnlyLeftClickAndTouch()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OnlyLeftClickAndTouch"",
    ""maps"": [
        {
            ""name"": ""Press"",
            ""id"": ""af7b60d2-babb-4222-8691-6b48c389f299"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""dc343739-35e1-4e41-8db6-61213831c995"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e7dc9b7c-9a07-4aab-bb47-19bd2173cb5f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f8110be-75dd-4c3a-adcf-fce797306fda"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e309fed3-a4a5-4056-8d40-6c2edd4f1e8a"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c702683-d2a9-4899-9eb5-a208b44dbdf2"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Press
        m_Press = asset.FindActionMap("Press", throwIfNotFound: true);
        m_Press_Click = m_Press.FindAction("Click", throwIfNotFound: true);
        m_Press_Pointer = m_Press.FindAction("Pointer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Press
    private readonly InputActionMap m_Press;
    private List<IPressActions> m_PressActionsCallbackInterfaces = new List<IPressActions>();
    private readonly InputAction m_Press_Click;
    private readonly InputAction m_Press_Pointer;
    public struct PressActions
    {
        private @OnlyLeftClickAndTouch m_Wrapper;
        public PressActions(@OnlyLeftClickAndTouch wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_Press_Click;
        public InputAction @Pointer => m_Wrapper.m_Press_Pointer;
        public InputActionMap Get() { return m_Wrapper.m_Press; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PressActions set) { return set.Get(); }
        public void AddCallbacks(IPressActions instance)
        {
            if (instance == null || m_Wrapper.m_PressActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PressActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Pointer.started += instance.OnPointer;
            @Pointer.performed += instance.OnPointer;
            @Pointer.canceled += instance.OnPointer;
        }

        private void UnregisterCallbacks(IPressActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Pointer.started -= instance.OnPointer;
            @Pointer.performed -= instance.OnPointer;
            @Pointer.canceled -= instance.OnPointer;
        }

        public void RemoveCallbacks(IPressActions instance)
        {
            if (m_Wrapper.m_PressActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPressActions instance)
        {
            foreach (var item in m_Wrapper.m_PressActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PressActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PressActions @Press => new PressActions(this);
    public interface IPressActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnPointer(InputAction.CallbackContext context);
    }
}
